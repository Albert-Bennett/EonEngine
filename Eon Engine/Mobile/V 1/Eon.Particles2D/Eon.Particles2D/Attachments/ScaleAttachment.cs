/* Created 14/03/2014
 * 
 * Author: Albert Bennett.
 * Copyright @ Epsilonic Studios.
 */

using Eon.Helpers;
using System.Collections.Generic;

namespace Eon.Particles2D.Attachments
{
    /// <summary>
    /// Used to scale a Particle.
    /// </summary>
    public sealed class ScaleAttachment : IAttachment
    {
        List<PropertySet> props = new List<PropertySet>();

        string id;

        float minScale;
        float maxScale;

        /// <summary>
        /// The unique identifaction name given to the Attachment.
        /// </summary>
        public string ID
        {
            get { return id; }
        }

        public int Priority
        {
            get { return 0; }
        }

        /// <summary>
        /// The properties of the objects editted by this ScaleAttachment.
        /// </summary>
        public List<PropertySet> Properties
        {
            get { return props; }
        }

        /// <summary>
        /// Creates a new ScaleAttachment.
        /// </summary>
        /// <param name="id">The ID of the ScaleAttachment.</param>
        /// <param name="scale">The scale of objects generated by this.</param>
        public ScaleAttachment(string id, float scale) : this(id, scale, scale) { }

        /// <summary>
        /// Creates a new ScaleAttachment.
        /// </summary>
        /// <param name="id">The ID of the ScaleAttachment.</param>
        /// <param name="minScale">The minimum scale for each Particle generated.</param>
        /// <param name="maxScale">The maximum scale for each Particle generated.</param>
        public ScaleAttachment(string id, float minScale, float maxScale)
        {
            this.id = id;

            this.minScale = minScale;
            this.maxScale = maxScale;
        }

        public void _Update() { }

        public void Generate()
        {
            float scale;

            if (minScale == maxScale)
                scale = minScale;
            else
                scale = RandomHelper.GetRandomFloat(minScale, maxScale);

            props.Add(new PropertySet()
            {
                Scale = scale
            });
        }

        public void Remove(int index)
        {
            props.Remove(props[index]);
        }

        public void ScreenResolutionChanged()
        {
            if (minScale == maxScale)
                minScale = maxScale = Common.ReCalibrateScale(minScale);
            else
            {
                minScale = Common.ReCalibrateScale(minScale);
                maxScale = Common.ReCalibrateScale(maxScale);
            }
        }

        public void Dispose()
        {
            props.Clear();
            props = null;
        }
    }
}
